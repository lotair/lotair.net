<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lotair</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-14T02:08:32.078Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lotair</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git checkout浅析</title>
    <link href="http://yoursite.com/2017/04/19/git-checkout-glance/"/>
    <id>http://yoursite.com/2017/04/19/git-checkout-glance/</id>
    <published>2017-04-19T08:14:17.000Z</published>
    <updated>2017-06-14T02:08:32.078Z</updated>
    
    <content type="html"><![CDATA[<p>我使用<a href="https://hexo.io/" target="_blank" rel="external"><code>hexo</code></a>来搭建<a href="https://github.com/sel-fish/sel-fish.net.src" target="_blank" rel="external">博客</a>，并且使用<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external"><code>next</code></a>主题。不想把<code>next</code>主题相关的源码加入到博客的<code>git仓库</code>里面，只想保存<code>next</code>的配置文件<code>themes/next/_config.yml</code>。于是建立了一个<code>硬链接</code>到<code>git仓库</code>的根目录下，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln themes/next/_config.yml next.yml</div></pre></td></tr></table></figure>
<p>这样，每次修改<code>themes/next/_config.yml</code>，都可以把对应的修改保存到<code>git仓库</code>中。然而对<code>next.yml</code>执行<code>git checkout</code>之后，<code>魔法</code>就“失效”了……</p>
<a id="more"></a>
<h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><p>没有执行<code>git checkout</code>之前，可以看到建立<code>硬链接</code>之后，两个文件的<code>inode号</code>是一样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -i next.yml themes/next/_config.yml</div><div class="line"></div><div class="line">1792890 next.yml  1792890 themes/next/_config.yml</div></pre></td></tr></table></figure>
<p>对<code>next.yml</code>执行了<code>git checkout</code>之后，可以看到<code>next.yml</code>的<code>inode号</code>产生了变化，也就是说创建了一个新的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout next.yml; ls -i next.yml themes/next/_config.yml</div><div class="line"></div><div class="line">130739 next.yml  1792890 themes/next/_config.yml</div></pre></td></tr></table></figure>
<p>使用<code>strace</code>观察<code>git checkout next.yml</code>执行了哪些系统调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">strace git checkout next.yml 2&gt;&amp;1 |grep next</div><div class="line"></div><div class="line">execve(&quot;/usr/bin/git&quot;, [&quot;git&quot;, &quot;checkout&quot;, &quot;next.yml&quot;], [/* 27 vars */]) = 0</div><div class="line">lstat(&quot;.git/next.yml&quot;, 0x7ffe7def1a30)  = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;.git/refs/next.yml&quot;, 0x7ffe7def1a30) = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;.git/refs/tags/next.yml&quot;, 0x7ffe7def1a30) = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;.git/refs/heads/next.yml&quot;, 0x7ffe7def1a30) = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;.git/refs/remotes/next.yml&quot;, 0x7ffe7def1a30) = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;.git/refs/remotes/next.yml/HEAD&quot;, 0x7ffe7def1a30) = -1 ENOENT (No such file or directory)</div><div class="line">lstat(&quot;next.yml&quot;, &#123;st_mode=S_IFREG|0775, st_size=12951, ...&#125;) = 0</div><div class="line">lstat(&quot;next.yml&quot;, &#123;st_mode=S_IFREG|0775, st_size=12951, ...&#125;) = 0</div><div class="line">unlink(&quot;next.yml&quot;)                      = 0</div><div class="line">open(&quot;next.yml&quot;, O_WRONLY|O_CREAT|O_EXCL, 0777) =</div></pre></td></tr></table></figure>
<p>可以看到确实调用了<code>unlink</code>删除，并调用了<code>open</code>新建了文件。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>在<code>macOS Sierra</code>上，对应到<code>strace</code>的工具是<a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html" target="_blank" rel="external"><code>dtruss</code></a>。如果使用时遇到如下报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dtruss df -lh</div><div class="line"></div><div class="line">dtrace: system integrity protection is on, some features will not be available</div><div class="line">dtrace: failed to initialize dtrace: DTrace requires additional privileges</div></pre></td></tr></table></figure>
<p>需要先关闭<code>system integrity protection</code>，在<code>Recovery OS</code>状态下调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">csrutil enable --without dtrace</div></pre></td></tr></table></figure>
<h2 id="再其它"><a href="#再其它" class="headerlink" title="再其它"></a>再其它</h2><p>这段故事到这里就结束了。但是，关于<code>git</code>的代码级别的解释还没有，<code>.git</code>下面的各个目录和文件的含义还是不清楚，还需继续了解。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11" target="_blank" rel="external">https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11</a></li>
<li><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html" target="_blank" rel="external">https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我使用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;hexo&lt;/code&gt;&lt;/a&gt;来搭建&lt;a href=&quot;https://github.com/sel-fish/sel-fish.net.src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;，并且使用&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;主题。不想把&lt;code&gt;next&lt;/code&gt;主题相关的源码加入到博客的&lt;code&gt;git仓库&lt;/code&gt;里面，只想保存&lt;code&gt;next&lt;/code&gt;的配置文件&lt;code&gt;themes/next/_config.yml&lt;/code&gt;。于是建立了一个&lt;code&gt;硬链接&lt;/code&gt;到&lt;code&gt;git仓库&lt;/code&gt;的根目录下，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ln themes/next/_config.yml next.yml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，每次修改&lt;code&gt;themes/next/_config.yml&lt;/code&gt;，都可以把对应的修改保存到&lt;code&gt;git仓库&lt;/code&gt;中。然而对&lt;code&gt;next.yml&lt;/code&gt;执行&lt;code&gt;git checkout&lt;/code&gt;之后，&lt;code&gt;魔法&lt;/code&gt;就“失效”了……&lt;/p&gt;
    
    </summary>
    
      <category term="fun" scheme="http://yoursite.com/categories/fun/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="strace" scheme="http://yoursite.com/tags/strace/"/>
    
      <category term="hlink" scheme="http://yoursite.com/tags/hlink/"/>
    
  </entry>
  
  <entry>
    <title>协程简介</title>
    <link href="http://yoursite.com/2016/12/31/corotine/"/>
    <id>http://yoursite.com/2016/12/31/corotine/</id>
    <published>2016-12-31T02:45:44.000Z</published>
    <updated>2017-06-14T02:08:32.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h2><p>对于高性能服务端程序来说事件驱动模型是非常典型的模型，这个模型主要思路为注册事件处理函数，等待事件触发，事件触发后调用注册的处理函数，流畅较为清晰。但是当场景稍微复杂一点点，比如一个登陆操作，先验证登陆是否是攻击等行为的操作，然后访问缓存看是否存在，如果不存在就要访问数据库。如果要做到尽可能的把请求做得流水，也就是把IO操作相关时间尽量让出来，这个时候我们采用事件驱动模型。<br><a id="more"></a></p>
<p>伪代码可能会如下的：  </p>
<pre><code>handleLoginEvent(logRequest) {
    viaRequest = build_verify_if_attack_request(logRequest)  
    verify_if_attack_request(viaRequest, callback(viaResponse) {
        if (if_pass(viaResponse)) {
            gucRequest = build_get_user_info_from_cache_request(loginRequest)
            get_user_info_from_cache(gucRequest, callback(gucResponse) {
                if (!if_got(gucResponse)) {
                    gudRequest = build_get_user_info_from_db_request(loginRequest)
                    get_user_info_from_db(gudRequest, callback(gudRequest) {
                        // return pass or not pass info to client
                    })
                } else {
                    // return pass info to client
                }
            })
        } else {
            //some fail logic
        }
    })
  }
</code></pre><p>这个代码是极其繁琐麻烦的，可以说是一种对机器友好，对人不太友好的方式。这个时候我们就要想有没有其他方式。当然显然是有的，比如我一个请求我一个线程，在线程中阻塞等待，这就以为的可能需要非常多的线程去做这个事情，而线程本省固有的代价（没个线程需要分配线程栈，当线程比较多的时候，这个内存代价是不小的），以及更重要的是线程数的增加直接导致上下文切换的代价增加，这不是我想看到的现象。那是否有存在同时满足更友好的编程体验，且内存CPU代价小的方案呢？其实有，也是这篇博客要介绍的协程(corotine)。</p>
<h2 id="概念理论"><a href="#概念理论" class="headerlink" title="概念理论"></a>概念理论</h2><p>对于协程的概念，wikipedia解释为 “Coroutines are computer program components that generalize subroutines for nonpreemptive multitasking, by allowing multiple entry points for suspending and resuming execution at certain locations.” 大概意思是说协程是非抢占式多任务执行序（可以和抢占式多任务中的线程对比一下），有多个入口点（可以resume回去），支持在确定的位置挂起和唤醒。OK，从定义上来关键点是它不是抢占式的，它的切换是在确定的点主动让出的。<br>协程按管理方式来分，分为对称和非对称2中，所谓对称的意味所有协程地位都是等价，可以在任意2个协程之间直接切换，而非对称的协程存在管理者，协程让出cpu资源总是回到管理者处，由其恢复不同的协程。<br>协程按实现方式大的又分为2类，stackless和stackfull，stackless顾名思义协程并不具有栈，也就是无法定义局部变量，最著名的是Duff Device。而相反的stackfull是每个线程都有栈空间</p>
<h2 id="不同实现方案"><a href="#不同实现方案" class="headerlink" title="不同实现方案"></a>不同实现方案</h2><p>下面我们简单介绍几种常见的协程实现方案：</p>
<h3 id="Duff-Device"><a href="#Duff-Device" class="headerlink" title="Duff Device"></a>Duff Device</h3><p>这种协程实现上面提到了属于stackless类型的协程，不能定义局部变量，好处是非常快，因为不需要保存栈等相关的信息。其利用了switch-case的trick来实现。具体可以参看<a href="https://en.wikipedia.org/wiki/Duff&#39;s_device" target="_blank" rel="external">https://en.wikipedia.org/wiki/Duff’s_device</a></p>
<h3 id="共享栈协程"><a href="#共享栈协程" class="headerlink" title="共享栈协程"></a>共享栈协程</h3><p>这种协程采取在线程栈上为协程分配内存作为其协程栈，切换的时候保存恢复相关寄存器。这种方式有好处是切换速度很快，但缺点很明显可以分配的协程数很有限和线程栈最大内存相关，其次是一旦出现协程栈越界，问题很难查</p>
<h3 id="复制栈协程"><a href="#复制栈协程" class="headerlink" title="复制栈协程"></a>复制栈协程</h3><p>这种协程采取当协程间发生切换，将会把当前的现场（相关寄存器信息）以及当前协程的栈内存复制出来存到堆上，再将需要切换的到的协程的栈的现场还原并把保存在堆上的栈信息恢复出来。这种方式好处很明显每个协程的栈空间能动态增长，不浪费内存，缺点也很明显每次切换代价大，需要复制栈的内容。典型的实现可以看python的greenlet库其实现了复制栈协程</p>
<h3 id="独立栈协程"><a href="#独立栈协程" class="headerlink" title="独立栈协程"></a>独立栈协程</h3><p>这种协程采取为每个协程在堆上各自分配一块特定大小的内存空间作为栈，切换的时候只需要操作保存恢复相关寄存器信息即可。优缺点正好和复制栈协程相反，这个是切换快，但是每个的栈空间在一开始就定好了，不能动态改变。</p>
<h2 id="让我们来实现协程库吧"><a href="#让我们来实现协程库吧" class="headerlink" title="让我们来实现协程库吧"></a>让我们来实现协程库吧</h2><p>对于windows用户来说可以直接使用fiber，这里我们就不展开了。对于linux用户来说可以使用swapcontext相关的API实现，也比较简单。linux的swapcontext考了很多问题，可以用来实现用户态线程，支持每个处理序有可以处理不同的信号，所以在保存现场时还需要保存信号相关的信息，恢复时需要恢复相关的信息，而在恢复信号相关时，存在一把进程级的大锁。所以采用多个线程，每个线程多个协程的实现时，会出现锁竞争问题。当然有比较trick的方案绕过去，具体可以看郁白的<a href="http://oceanbase.org.cn/?p=61" target="_blank" rel="external">http://oceanbase.org.cn/?p=61</a>这篇文章。当然还有一种更加通用更加复杂的实现方案时自己操作寄存器，是的，下面我们将会实现的就是这种方式</p>
<h2 id="系统ABI"><a href="#系统ABI" class="headerlink" title="系统ABI"></a>系统ABI</h2><p>自己操作寄存器，就要需要知道该平台函数调用的C规范问题，这是一个ABI问题。所以下面我们x64 linux平台为例进行简单的说明(下面的实现也会基于x64，linux)。首先摆在面前的一个问题是寄存器那么多，对于这个问题哪些我是需要的？（当然你保存所有的寄存器，总是没有错的，但是我想你不会那么无聊的，而且这是有代价的）首先我们需要保存当前函数的参数，调用规范明确表示C中基本类型（不含float/double）以及指针按参数顺序使用6个寄存器<code>RDI RSI RDX RCX R8 R9</code>，如果参数个数大于6个会使用栈，如果函数参数是有浮点数则会使用寄存器<code>XMM0-XMM7</code>。然后是需要使用的话，需要被调用方保存的寄存器是<code>RBX RBP R12 R13 R14 R15</code>。再然后当前的栈顶指针<code>RSP</code>以及指令寄存器<code>RIP</code></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我们参考简化glibc对swapcontext的实现，首先我们协程函数的原型我们参考pthread线程的原型定义为<code>void (*co_ctx_func_t)(void* argv)</code>,也就是只用<code>RDI</code>寄存器，但是下面我还是保存了<code>RDI RSI RDX RCX R8 R9</code>，但是没有保存更多到<code>RSP</code>以及浮点相关的，主要是觉得没有必要。下面简单讲一下实现，具体所有代码在<a href="https://github.com/lotair/co" target="_blank" rel="external">https://github.com/lotair/co</a>可以看到</p>
<pre><code>typedef struct co_ctx_t
{
      greg_t gregs[NGREG]; // 14个寄存器
      struct co_ctx_t *uc_link; // 协程退出跳转到谁
      void*  ss_sp;   // 栈
      size_t ss_size; // 栈大小
      int    finish;  // 栈是否已经结束
} co_ctx_t;

void co_ctx_make(co_ctx_t* ctx, co_ctx_func_t fn, void* argv) {
      greg_t *sp;

    // 栈是向下生长的从高地址到低地址
      sp = (greg_t *)((uintptr_t)ctx-&gt;ss_sp + ctx-&gt;ss_size);
      sp -= 2;
      sp = (greg_t *)((((uintptr_t)sp) &amp; -16L) - 8);

      ctx-&gt;gregs[REG_RIP] = (uintptr_t)fn;
      ctx-&gt;gregs[REG_RBX] = (uintptr_t)&amp;sp[1];
      ctx-&gt;gregs[REG_RSP] = (uintptr_t)sp;

      ctx-&gt;gregs[REG_RDI] = (uintptr_t)argv;

      sp[0] = (uintptr_t)&amp;__co_start;
      sp[1] = (uintptr_t)ctx-&gt;uc_link;
      sp[2] = (uintptr_t)&amp;ctx-&gt;finish;
}

void co_switch(co_ctx_t* old_ctx, co_ctx_t* new_ctx) {
    // 各种保存到old_ctx
    // 各种从new_ctx恢复现场
 }

int main() {
    // ...
      while (1) {
        int done = 0;
        for (int i = 0; i &lt; UTHREAD_MAX_NUM; i++) {
              if (ctx[i].finish == 0) {
                done = 1;
                co_switch(&amp;ctx_main, ctx + i);
              }
        }
        if (done == 0) break;
      }
    // ...
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景引入&quot;&gt;&lt;a href=&quot;#场景引入&quot; class=&quot;headerlink&quot; title=&quot;场景引入&quot;&gt;&lt;/a&gt;场景引入&lt;/h2&gt;&lt;p&gt;对于高性能服务端程序来说事件驱动模型是非常典型的模型，这个模型主要思路为注册事件处理函数，等待事件触发，事件触发后调用注册的处理函数，流畅较为清晰。但是当场景稍微复杂一点点，比如一个登陆操作，先验证登陆是否是攻击等行为的操作，然后访问缓存看是否存在，如果不存在就要访问数据库。如果要做到尽可能的把请求做得流水，也就是把IO操作相关时间尽量让出来，这个时候我们采用事件驱动模型。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
      <category term="corotine" scheme="http://yoursite.com/tags/corotine/"/>
    
  </entry>
  
  <entry>
    <title>New Post</title>
    <link href="http://yoursite.com/2016/12/07/new-post/"/>
    <id>http://yoursite.com/2016/12/07/new-post/</id>
    <published>2016-12-07T19:51:08.000Z</published>
    <updated>2017-06-14T02:08:32.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">su lotair</div><div class="line">cd ~/lotair.net</div><div class="line"></div><div class="line">hexo new new-post</div><div class="line">INFO  Created: ~/lotair.net/source/_posts/new-post.md</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Edit-body"><a href="#Edit-body" class="headerlink" title="Edit body"></a>Edit body</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim ~/lotair.net/source/_posts/new-post.md</div><div class="line"></div><div class="line">...</div><div class="line">author: sel-fish</div><div class="line">tags:</div><div class="line">  - new post</div><div class="line">categories:</div><div class="line">  - Tutorial</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo s</div><div class="line"></div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>visit <a href="http://lotair.net:4000" target="_blank" rel="external">http://lotair.net:4000</a> to preview</p>
<h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./hexo_git_deploy.sh</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;su lotair&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd ~/lotair.net&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo new new-post&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INFO  Created: ~/lotair.net/source/_posts/new-post.md&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="http://yoursite.com/categories/Tutorial/"/>
    
    
      <category term="new post" scheme="http://yoursite.com/tags/new-post/"/>
    
  </entry>
  
</feed>
